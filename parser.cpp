#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <cstring>
#include "parser.h"
#include "conax_core.h"

uint8_t frame[255];
uint8_t chid[2];
uint8_t keyid;
uint8_t casid[2];
uint8_t streamid[2];// 0f,20
uint8_t ecmid[2]; //15,16
uint8_t cpdura[2];//1b, 1c
uint8_t cw0[8];
uint8_t cw1[8];
uint8_t  acc[20];
uint8_t cwnum[2];
uint8_t cpnum[2];
uint8_t keyindex;

const uint8_t ans0003[0x57] = {
//00 , 0x01 , 0x02 , 0x03 , 0x04 , 0x05 , 0x06 , 0x07 , 0x08 , 0x09 , 0x0a , 0x0b , 0x0c , 0x0d , 0x0e , 0x0f
0x02 , 0x00 , 0x03 , 0x00 , 0x51 , 0x00 , 0x0e , 0x00 , 0x02 , 0x00 , 0x00 , 0x00 , 0x02 , 0x00 , 0x01 , 0x01,
0x00 , 0x16 , 0x00 , 0x02 , 0x00 , 0xc8 , 0x00 , 0x17 , 0x00 , 0x02 , 0x00 , 0xc8 , 0x00 , 0x03 , 0x00 , 0x02,
0x00 , 0xc8 , 0x00 , 0x04 , 0x00 , 0x02 , 0x00 , 0xc8 , 0x00 , 0x05 , 0x00 , 0x02 , 0xfe , 0x0c , 0x00 , 0x06,
0x00 , 0x02 , 0x00 , 0x00 , 0x00 , 0x07 , 0x00 , 0x02 , 0x00 , 0x64 , 0x00 , 0x08 , 0x00 , 0x02 , 0x00 , 0x00,
0x00 , 0x09 , 0x00 , 0x02 , 0x00 , 0x0a , 0x00 , 0x0a , 0x00 , 0x01 , 0x01 , 0x00 , 0x0b , 0x00 , 0x01 , 0x02,
0x00 , 0x0c , 0x00 , 0x02 , 0x00 , 0x64 , 0x00
};

const uint8_t ans0103[0x1d] = {
//00 , 0x01 , 0x02 , 0x03 , 0x04 , 0x05 , 0x06 , 0x07 , 0x08 , 0x09 , 0x0a , 0x0b , 0x0c , 0x0d , 0x0e , 0x0f
0x02 , 0x01 , 0x03 , 0x00 , 0x17 , 0x00 , 0x0e , 0x00 , 0x02 , 0x00 , 0x00 , 0x00 , 0x0f , 0x00 , 0x02 , 0x00,
0x00 , 0x00 , 0x19 , 0x00 , 0x02 , 0x00 , 0x00 , 0x00 , 0x11 , 0x00 , 0x01 , 0x00 , 0x00
};

const uint8_t ans0202[0xd8] = {
0x02, 0x02, 0x02, 0x00, 0xd2, 0x00, 0x0e, 0x00, 0x02, 0xff, 0xff, 0x00, 0x0f, 0x00, 0x02, 0xff,
0xff, 0x00, 0x12, 0x00, 0x02, 0xff, 0xff, 0x00, 0x15, 0x00, 0xbc, 0x47, 0x5f, 0xff, 0x10, 0x00,
0xFF, 0xFF, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00
};

const uint8_t ans0105[0x12] = {
0x02 , 0x01 , 0x05 , 0x00 , 0x0c , 0x00 , 0x0e , 0x00 , 0x02 , 0x00 , 0x00 , 0x00 , 0x0f , 0x00 , 0x02 , 0x00,
0x00 , 0x00
};


void setup(uint8_t debug,const char *database,const char *user,const char *pass,const char *dbname){
    read_keys_sql(debug,database,user,pass,dbname);
}


void parse(char *daten,uint8_t menge,char *zurueck,int& senden,uint8_t debug){
    if (daten[1]==0x0 && daten[2]==0x01){//00 01 => 00 03
        chid[0]=daten[0x9];chid[1]=daten[0xa];
        casid[0]=daten[0xf];casid[1]=daten[0x10];
        for(int i = 0;i <= ans0003[4]+5;i++){ zurueck[i] = ans0003[i];}
        zurueck[0x09]=chid[0];zurueck[0x0a]=chid[1];
        senden = 1;
    }

    else if (daten[1] == 0x00 && daten[2] == 0x04){
        senden = 0;
    }

    else if(daten[1]==0x1 && daten[2]==0x01){//01 01 => 01 03
        streamid[0]=daten[0x0f];streamid[1]=daten[0x10];
        ecmid[0]=daten[0x15];ecmid[1]= daten[0x16];
        cpdura[0]=daten[0x1b];cpdura[1]=daten[0x1c];
        for(int i = 0;i <= ans0103[4]+5;i++){ zurueck[i] = ans0103[i];}
        zurueck[0x09]=chid[0];zurueck[0x0a]=chid[1];
        zurueck[0x0f]=streamid[0];zurueck[0x10]=streamid[1];
        zurueck[0x15]=ecmid[0];zurueck[0x16]=ecmid[1];
        senden = 1;
    }
    else if (daten[1]==0x1 && daten[2]==0x04){ //01 04 => 01 05
        for(int i = 0;i <= ans0105[4]+5;i++){ zurueck[i] = ans0105[i];}
        zurueck[0x09]=daten[0x09];zurueck[0x0a]=daten[0x0a];
        zurueck[0x0f]=daten[0x0f];zurueck[0x10]=daten[0x10];
        senden = 1;
    }

    else if(daten[1]==0x2 &&daten[2]==0x01){//CW provisioning
           for (int i = 5; i <= daten[4]+5;i++){

    if(daten[i] == 0x00 && daten[i+1] == 0x14 && daten[i+3]== 0x0a) { //CW0 CW1
        cwnum[0] = daten[i+4]; cwnum[1] = daten[i+5];
        if ((cwnum[1] & 1) == 1){
            for(int j=0;j<=7;j++){cw1[j] = daten[i+6+j]&0xff;}
        }
        else {
            for(int j=0;j<=7;j++){cw0[j] = daten[i+6+j]&0xff;}
        }
    i += daten[i+3]+3;
    }
   else if(daten[i] == 0x00 && daten[i+1] == 0x0e && daten[i+3]== 0x02){ //CHID
        chid[0] = daten[i+4]&0xff;chid[1] = daten[i+5]&0xff;
        i += daten[i+3]+3;
    }
     else if(daten[i] == 0x00 && daten[i+1] == 0x0f && daten[i+3]== 0x02) { //streamid
        streamid[0]=daten[i+4];streamid[1]=daten[i+5];
        i += daten[i+3]+3;
    }
     else if(daten[i] == 0x00 && daten[i+1] == 0x13 && daten[i+3]== 0x02) { //cp duration
        cpdura[0] = daten[i+4];cpdura[1] = daten[i+5];
        i += daten[i+3]+3;
    }
    else if(daten[i] == 0x00 && daten[i+1] == 0x12 && daten[i+3]== 0x02) {//crypto period
        cpnum[0] = daten[i+4];cpnum[1] = daten[i+5];
        i += daten[i+3]+3;
    }
    else if(daten[i] == 0x00 && daten[i+1] == 0x0d && daten[i+3] > 0x0) {//access criteria
        for(int j= 0;j <= daten[i+3]+3;j++){acc[j] = daten[i+3+j];}
        i += daten[i+3]+3;
    }

   }
if(debug == 1){
    printf("\nCW0: ");
    for(int j=0;j<=7;j++){printf("%02X ",cw0[j]);}
    printf("\nCW1: ");
    for(int j=0;j<=7;j++){printf("%02X ",cw1[j]);}
    printf("\nAccess-Criteria: ");
    for(int j=1;j<=acc[0];j++){printf("%02X ",acc[j]&0xff);}
    printf("\nCHID: %02X %02X \n",chid[0]&0xff,chid[1]&0xff);
    printf("STREAM ID: %02X %02X \n",streamid[0]&0xff,streamid[1]&0xff);
    printf("CP Number: %02X %02X \n",cpnum[0],cpnum[1]);
    printf("CP DURATION: %02X %02X (%d sec.) \n",cpdura[0]&0xff,cpdura[1]&0xff,(cpdura[1]&0xff)/10);
    printf("\n");
}
    keyindex = acc[1];
    //for(int i = 0;i <= ans0202[4]+5;i++){ zurueck[i] = (ans0202[i] & 0xff);}
    memcpy(&zurueck[0],&ans0202[0],0xd8);
    if ((cpnum[1]&0x1) == 1){frame[0] = 0x1;}
    else {frame[0] = 0x00;}
    frame[1] = 0x00;

    generate_ecm(chid,frame,acc,keyindex,cw0,cw1,debug);

    frame[0]=0;
 if(debug == 1){
    printf("ECM to SEND: \n");
    for (int i=0;i <= 0x46 ;i++){printf("%02X ",frame[i]);
    } //36
 }
    for (int i=0;i <= 0x46 ;i++){
        zurueck[(0x20 + i)]=frame[i];
    }

    if ((cpnum[1]&0x1) == 1){zurueck[0x20] = 0x81;}
    else {zurueck[0x20] = 0x80;}
    zurueck[0x21]=0x70;
    if(debug == 1){
        printf("\n");
    }
    zurueck[0x0f]=streamid[0];zurueck[0x10]=streamid[1];
    zurueck[0x15]=cpnum[0];zurueck[0x16]=cpnum[1];


    senden = 1;

} //end cw provisioning
    if(debug == 1){
        printf("\n");
    }
}
